import 'package:flutter/material.dart';
import '../../../../core/utils/AppColors.dart';

import '../../../settings/data/services/theme_manager.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AppColors

class CustomMessageInput extends StatefulWidget {
  final TextEditingController controller;
  final Function(String) onTextChanged;

  const CustomMessageInput({
    required this.controller,
    required this.onTextChanged,
    super.key,
  });

  @override
  _CustomMessageInputState createState() => _CustomMessageInputState();
}

class _CustomMessageInputState extends State<CustomMessageInput> {
  final List<String> emojis = [
    'üòä',
    'üòÇ',
    '‚ù§Ô∏è',
    'üëç',
    'üò¢',
    'üò±',
    'üò¥',
    'üò†',
    'üòà',
    'üòá',
    'üòã',
    'üòå',
    'üòò',
    'üòú',
    'üòù',
    'üòû',
    'üòí',
    'üòì',
    'üòî',
    'üòï'
  ];

  void _showEmojiPicker() {
    final colors = isWhiteNotifier.value
        ? AppColors.light()
        : AppColors.dark(); // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã

    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return Container(
          height: 200,
          color: colors.backgroundColor, // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
          child: GridView.builder(
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 5,
            ),
            itemCount: emojis.length,
            itemBuilder: (context, index) {
              return GestureDetector(
                onTap: () {
                  widget.controller.text += emojis[index];
                  widget.onTextChanged(widget.controller.text);
                  Navigator.pop(context);
                },
                child: Center(
                  child: Text(
                    emojis[index],
                    style: TextStyle(
                        fontSize: 24,
                        color: colors.textColor), // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                  ),
                ),
              );
            },
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final colors = isWhiteNotifier.value
        ? AppColors.light()
        : AppColors.dark(); // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã

    return Container(
      color: colors.backgroundColor, // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
        child: Row(
          children: [
            IconButton(
              icon: Icon(
                Icons.emoji_emotions,
                color: colors.iconColor, // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏
              ),
              onPressed: _showEmojiPicker,
            ),
            Expanded(
              child: TextField(
                style:
                    TextStyle(color: colors.textColor), // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                controller: widget.controller,
                maxLines: null,
                onChanged: (text) {
                  if (text.length > 2000) {
                    widget.controller.text = text.substring(0, 2000);
                    widget.controller.selection = TextSelection.fromPosition(
                      TextPosition(offset: widget.controller.text.length),
                    );
                  }
                  widget.onTextChanged(text);
                },
                decoration: InputDecoration(
                  hintText: '–°–æ–æ–±—â–µ–Ω–∏–µ',
                  hintStyle: TextStyle(
                      color: colors.hintColor), // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
                  filled: true,
                  fillColor: colors
                      .cardColor, // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º cardColor)
                  contentPadding: const EdgeInsets.symmetric(
                      horizontal: 16.0, vertical: 8.0),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(20.0),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
